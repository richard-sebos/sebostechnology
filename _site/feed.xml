

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Sebos Technology</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-07-02T17:50:10-06:00</updated>
  <author>
    <name>Richard Chamberlain</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator>
  <rights> © 2025 Richard Chamberlain </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Monitoring Robot Network Traffic with Suricata</title>
    <link href="http://localhost:4000/posts/Suricata-Reporting/" rel="alternate" type="text/html" title="Monitoring Robot Network Traffic with Suricata" />
    <published>2025-07-01T03:00:00-06:00</published>
  
    <updated>2025-07-01T03:00:00-06:00</updated>
  
    <id>http://localhost:4000/posts/Suricata-Reporting/</id>
    <content type="text/html" src="http://localhost:4000/posts/Suricata-Reporting/" />
    <author>
      <name>Richard Chamberlain</name>
    </author>

  
    
    <category term="Robotics" />
    
    <category term="Networking" />
    
  

  <summary>Introduction

In a previous phase of this robotics project, Suricata was installed as part of the initial system build. At that stage, only a few basic rules were added for initial monitoring purposes. Now that the core application stack is largely in place, it’s time to take a deeper look into how the robot is interacting with the network. Understanding these interactions is critical not only ...</summary>

  </entry>

  
  <entry>
    <title>Using a Jump Server and SSH ProxyJump in Your Homelab</title>
    <link href="http://localhost:4000/posts/Jump-Server/" rel="alternate" type="text/html" title="Using a Jump Server and SSH ProxyJump in Your Homelab" />
    <published>2025-06-29T02:00:00-06:00</published>
  
    <updated>2025-06-29T17:02:26-06:00</updated>
  
    <id>http://localhost:4000/posts/Jump-Server/</id>
    <content type="text/html" src="http://localhost:4000/posts/Jump-Server/" />
    <author>
      <name>Richard Chamberlain</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Networking" />
    
    <category term="Security" />
    
  

  <summary>What Is a Jump Server (or Bastion Host)?

If you’re running multiple Linux servers in your homelab or a small network, having a centralized way to access them can save a lot of time and improve security. This is where a jump server—also called a bastion host—comes into play.

A jump server acts as a secure gateway between your workstation and your internal systems. Instead of connecting to each...</summary>

  </entry>

  
  <entry>
    <title>SSH Authentication Key Rotation: Why and How to Expire SSH Keys</title>
    <link href="http://localhost:4000/posts/SSH-Auth-Key-Rotation/" rel="alternate" type="text/html" title="SSH Authentication Key Rotation: Why and How to Expire SSH Keys" />
    <published>2025-06-22T04:00:00-06:00</published>
  
    <updated>2025-06-22T10:14:27-06:00</updated>
  
    <id>http://localhost:4000/posts/SSH-Auth-Key-Rotation/</id>
    <content type="text/html" src="http://localhost:4000/posts/SSH-Auth-Key-Rotation/" />
    <author>
      <name>Richard Chamberlain</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Security" />
    
  

  <summary>Introduction

When setting up a new Linux server, it’s common practice to configure SSH authentication using public keys. Often, these keys are reused indefinitely—sometimes for weeks, months, or even years. While SSH keys provide a robust layer of security, they can also introduce risk if not managed properly. Unlike passwords, SSH keys are not usually rotated or set to expire, leading to a fa...</summary>

  </entry>

  
  <entry>
    <title>Secure SSH Access with Modular Policy Files</title>
    <link href="http://localhost:4000/posts/SSH-Polices/" rel="alternate" type="text/html" title="Secure SSH Access with Modular Policy Files" />
    <published>2025-06-15T04:00:00-06:00</published>
  
    <updated>2025-06-22T09:47:40-06:00</updated>
  
    <id>http://localhost:4000/posts/SSH-Polices/</id>
    <content type="text/html" src="http://localhost:4000/posts/SSH-Polices/" />
    <author>
      <name>Richard Chamberlaiin</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Security" />
    
    <category term="DevOps" />
    
  

  <summary>Introduction

When it comes to securing SSH, there are plenty of guides and videos focusing on the “first 10 things to change” in your SSH setup. However, this article goes beyond that. We focus on how to group SSH settings into modular, reusable security policy files—providing a flexible and maintainable way to secure your SSH server. By organizing configuration options into purpose-built file...</summary>

  </entry>

  
  <entry>
    <title>Secure Remote Deployments with SSH Agent Forwarding and GitHub</title>
    <link href="http://localhost:4000/posts/Agent-Forwarding/" rel="alternate" type="text/html" title="Secure Remote Deployments with SSH Agent Forwarding and GitHub" />
    <published>2025-06-05T04:00:00-06:00</published>
  
    <updated>2025-06-22T09:47:40-06:00</updated>
  
    <id>http://localhost:4000/posts/Agent-Forwarding/</id>
    <content type="text/html" src="http://localhost:4000/posts/Agent-Forwarding/" />
    <author>
      <name>Richard Chamberlain</name>
    </author>

  
    
    <category term="DevOps" />
    
    <category term="Security" />
    
  

  <summary>A practical guide to secure remote deployments using SSH Agent Forwarding and GitHub SSH key integration—no private key exposure on remote hosts.</summary>

  </entry>

</feed>


